using System;
using System.Collections.Generic;
using System.Text;

using GameLibrary.Map;
using GameLibrary.Character;
using GameLibrary.Settlement.Building;
using GameLibrary.Technology;

namespace GameLibrary.Extension
{
    public struct GameExtension
    {

        public static int PlayerDefautStatsValue = 33;
        public static int CharactersDefautStartValue = 15;

        public static IReadOnlyDictionary<ABuildingType, int> BuildTime = new Dictionary<ABuildingType, int>() {
            { ABuildingType.TownHall, 0 },
            { ABuildingType.Moat, 2 },
            { ABuildingType.EarthenShaft, 3 },
            { ABuildingType.Palisade, 4 },
            { ABuildingType.StoneWalls, 7 },
            { ABuildingType.Barn, 2 },
            { ABuildingType.MilitaryPlatz, 3 },
            { ABuildingType.ResidentialQuarter, 6 },
            { ABuildingType.CraftWorkshop, 3 },
            { ABuildingType.Forge, 3 },
            { ABuildingType.Armory, 2 },
            { ABuildingType.CityWarehouse, 3 },
            { ABuildingType.ShoppingQuarter, 6 },
            { ABuildingType.Bank, 7 },
            { ABuildingType.Treasury, 5 },
            { ABuildingType.School, 2 },
            { ABuildingType.Monastery, 8 },
            { ABuildingType.Hospital, 5 },
            { ABuildingType.Theatre, 4 },
            { ABuildingType.Library, 3 },
            { ABuildingType.Palace, 15 },
            { ABuildingType.Garden, 6 },
            { ABuildingType.Mill, 3 },
            { ABuildingType.ArableLand, 2 },
            { ABuildingType.Farm, 5 },
            { ABuildingType.Aqueduct, 3 },
            { ABuildingType.Well, 1 }
        };

        public static IReadOnlyDictionary<ABuildingType, int> BuildCost = new Dictionary<ABuildingType, int>() {
            { ABuildingType.TownHall, 0 },
            { ABuildingType.Moat, 60 },
            { ABuildingType.EarthenShaft, 100 },
            { ABuildingType.Palisade, 180 },
            { ABuildingType.StoneWalls, 340 },
            { ABuildingType.Barn, 180 },
            { ABuildingType.MilitaryPlatz, 290 },
            { ABuildingType.ResidentialQuarter, 110 },
            { ABuildingType.CraftWorkshop, 140 },
            { ABuildingType.Forge, 210 },
            { ABuildingType.Armory, 160 },
            { ABuildingType.CityWarehouse, 200 },
            { ABuildingType.ShoppingQuarter, 150 },
            { ABuildingType.Bank, 300 },
            { ABuildingType.Treasury, 270 },
            { ABuildingType.School, 120 },
            { ABuildingType.Monastery, 170 },
            { ABuildingType.Hospital, 290 },
            { ABuildingType.Theatre, 140 },
            { ABuildingType.Library, 170 },
            { ABuildingType.Palace, 510 },
            { ABuildingType.Garden, 110 },
            { ABuildingType.Mill, 110 },
            { ABuildingType.ArableLand, 80 },
            { ABuildingType.Farm, 140 },
            { ABuildingType.Aqueduct, 190 },
            { ABuildingType.Well, 70 }
        };

        public static IReadOnlyList<string> SettlementName = new List<string>() {
            "Нарфей",
            "Руней",
            "Визонесс",
            "Ронул",
            "Карфест",
            "Волунд",
            "Вургрин",
            "Хортгар",
            "Алланта",
            "Нортсдол",
            "Олизерн",
            "Горстей",
            "Скалсост",
            "Эрмаген",
            "Ирелионд",
            "Эскалит",
            "Карнст",
            "Сейст",
            "Волес",
            "Нестерн",
            "Руфен"
        };

        private static IReadOnlyList<string> DefaultMaleName = new List<string>()
        {
            "Бруг",
            "Рид",
            "Лим",
            "Мейлио",
            "Эммилиам",
            "Райлим",
            "Бурейн",
            "Аллио",
            "Ариано",
            "Брумо",
            "Григео",
            "Ирео",
            "Райло",
            "Элано",
            "Эмилео",
            "Эрио",
            "Груг",
            "Рав",
            "Ролар",
            "Торд",
            "Иттели",
            "Лаур",
            "Аранд",
            "Иссарий",
            "Риторден ",
            "Эртранор ",
            "Хореф",
            "Анвер",
            "Ваггор",
            "Нолас",
            "Толвиан",
            "Энимосс",
            "Эммор",
            "Элмис",
            "Эммин",
            "Эриан",
            "Эхолд",
            "Акамир",
            "Рефар",
            "Анхель",
            "Апофедей",
            "Артадей",
            "Иралгас",
            "Квинтесей",
            "Кодифей",
            "Луриан",
            "Отритей",
            "Тамилан",
            "Эммилиан",
            "Эссандол",
            "Эртровий",
            "Алам",
            "Ашшар",
            "Рен",
            "Хель",
            "Марк",
            "Ликург",
        };

        private static IReadOnlyList<string> DefaultFemaleName = new List<string>()
        {
            "Аскель",
            "Вирель",
            "Вистель",
            "Лиаль",
            "Лорэль",
            "Розэль",
            "Эллиофель",
            "Элориэль",
            "Ариан",
            "Рейнин",
            "Дайна",
            "Лийа",
            "Эйва",
            "Ангелия",
            "Ириан",
            "Авриания ",
            "Аксия",
            "Аскели",
            "Виоль",
            "Лорей",
            "Альдевия",
            "Аскиния",
            "Илир",
            "Иссетерия",
            "Ниэрия",
            "Эльва",
            "Эфистовия",
            "Витовия",
            "Икева",
            "Фисантия",
            "Нистерия",
            "Азалия",
            "Азармалия",
            "Амидея",
            "Ападея",
            "Дефатея",
            "Эверия",
            "Эллиру",
            "Эльвинария",
            "Эпифалия",
            "Эроус",
            "Кэра",
            "Лифра",
            "Лори",
            "Эллианель",
            "Софья",
            "Эдель"
        };

        public static IReadOnlyList<string> DefaultFamily = new List<string>()
        {
            "Ла'Рош",
            "Ла'Саж",
            "О'Зелт",
            "О'Лец",
            "О'Сед",
            "О'Суфо",
            "О'Тет",
            "О'Ферго",
            "О'Фьёр",
            "Со'Рах",
            "Со'Явмa",
            "Та'Каро",
            "Та'Норок",
            "Но'Дест",
            "Но'Рин",
            "Ши'Рен",
            "Эри'Олф",
            "А'Солор",
            "Ал'Рофос",
            "Ал'Фирес",
            "Мо'Сен",
            "Ре'Анниа",
            "Ре'Миа",
            "Э'Лун",
            "Э'Рун",
            "Э'Сон",
            "Э'Руан",
            "да'Жарк",
            "да'Лемт",
            "да'Фабу",
            "да'Фонси",
            "да'Эрик",
            "ле'Сия",
            "ле'Эко",
            "ле'Эмиче",
            "т'Йоки",
            "т'Леко",
            "Д'Ивок",
            "Д'Рем",
            "Д'Эвери",
            "Д'Эми",
            "Ри'Фельт",
            "Эш'Роу",
            "Д'Рено",
            "Д'Солеро",
            "Д'Ваалрик",
            "Д'Остафир",
            "Д'Ивлуриа",
            "Д'Энлорио",
            "Д'Эллари",
            "Д'Аэрии",
            "Д'Оларно",
            "Д'Солонто",
            "Д'Эст",
            "Д'Соу",
            "Д'Черис",
            "Д'Корус",
            "Д'Гримм",
        };

        public static IReadOnlyDictionary<ATechnologyType, int> TechnologiesScienceValue = new Dictionary<ATechnologyType, int>() {
            { ATechnologyType.PrimitiveSociety, 0 },
            { ATechnologyType.HuntingAndGathering, 15 },
            { ATechnologyType.Paganism, 10 },
            { ATechnologyType.Agriculture, 10 },
            { ATechnologyType.Fishing, 10 },
            { ATechnologyType.Masonry, 10 },
            { ATechnologyType.Phytotherapy, 10 },
            { ATechnologyType.Priesthood, 10 },
            { ATechnologyType.WoodProcessing, 10 },
            { ATechnologyType.StoneProcessing, 10 },
            { ATechnologyType.Mining, 10 },
            { ATechnologyType.Medicine, 10 },
            { ATechnologyType.AnimalHusbandry, 10 },
            { ATechnologyType.BronzeProcessing, 10 },
            { ATechnologyType.Writing, 10 },
            { ATechnologyType.Handicraft, 10 },
            { ATechnologyType.CastingMetals, 10 },
            { ATechnologyType.Alphabet, 10 },
            { ATechnologyType.MilitaryTraditions, 10 },
            { ATechnologyType.Mathematics, 10 },
            { ATechnologyType.TheatricalArt, 10 },
            { ATechnologyType.Сurrency, 10 },
            { ATechnologyType.Building, 10 },
            { ATechnologyType.Banking, 10 },
            { ATechnologyType.CodeOfLaws, 10 },
            { ATechnologyType.Construction, 10 },
            { ATechnologyType.Education, 10 }
        };

        public static IReadOnlyDictionary<ATechnologyType, IEnumerable<ATechnologyType>> TechnologiesRequiredTechnologies = new Dictionary<ATechnologyType, IEnumerable<ATechnologyType>>() {
            { ATechnologyType.PrimitiveSociety, new ATechnologyType[] { } },
            { ATechnologyType.HuntingAndGathering, new ATechnologyType[] { ATechnologyType.PrimitiveSociety }  },
            { ATechnologyType.Paganism, new ATechnologyType[] { ATechnologyType.PrimitiveSociety }  },
            { ATechnologyType.Agriculture, new ATechnologyType[] { ATechnologyType.HuntingAndGathering }  },
            { ATechnologyType.Fishing, new ATechnologyType[] { ATechnologyType.HuntingAndGathering }  },
            { ATechnologyType.Masonry, new ATechnologyType[] { ATechnologyType.HuntingAndGathering }  },
            { ATechnologyType.Phytotherapy, new ATechnologyType[] { ATechnologyType.Paganism }  },
            { ATechnologyType.Priesthood, new ATechnologyType[] { ATechnologyType.Paganism }  },
            { ATechnologyType.WoodProcessing, new ATechnologyType[] { ATechnologyType.HuntingAndGathering }  },
            { ATechnologyType.StoneProcessing, new ATechnologyType[] { ATechnologyType.HuntingAndGathering }  },
            { ATechnologyType.Mining, new ATechnologyType[] { ATechnologyType.HuntingAndGathering }  },
            { ATechnologyType.Medicine, new ATechnologyType[] { ATechnologyType.Phytotherapy, ATechnologyType.Priesthood }  },
            { ATechnologyType.AnimalHusbandry, new ATechnologyType[] { ATechnologyType.HuntingAndGathering }  },
            { ATechnologyType.BronzeProcessing, new ATechnologyType[] { ATechnologyType.Mining }  },
            { ATechnologyType.Writing, new ATechnologyType[] { ATechnologyType.Priesthood }  },
            { ATechnologyType.Handicraft, new ATechnologyType[] { ATechnologyType.CastingMetals }  },
            { ATechnologyType.CastingMetals, new ATechnologyType[] { ATechnologyType.BronzeProcessing }  },
            { ATechnologyType.Alphabet, new ATechnologyType[] { ATechnologyType.Writing }  },
            { ATechnologyType.MilitaryTraditions, new ATechnologyType[] { ATechnologyType.Handicraft }  },
            { ATechnologyType.Mathematics, new ATechnologyType[] { ATechnologyType.Writing }  },
            { ATechnologyType.TheatricalArt, new ATechnologyType[] { ATechnologyType.Alphabet }  },
            { ATechnologyType.Сurrency, new ATechnologyType[] { ATechnologyType.Mathematics }  },
            { ATechnologyType.Building, new ATechnologyType[] { ATechnologyType.Mathematics, ATechnologyType.Masonry }  },
            { ATechnologyType.Banking, new ATechnologyType[] { ATechnologyType.Сurrency }  },
            { ATechnologyType.CodeOfLaws, new ATechnologyType[] { ATechnologyType.Сurrency }  },
            { ATechnologyType.Construction, new ATechnologyType[] { ATechnologyType.Building }  },
            { ATechnologyType.Education, new ATechnologyType[] { ATechnologyType.CodeOfLaws }  }
        };

        public static string CharacterName(ASexType sexType)
        {
            Random random = new Random((int)DateTime.Now.Ticks);
            return sexType.Equals(ASexType.Female)? DefaultFemaleName[random.Next(DefaultFemaleName.Count)]: DefaultMaleName[random.Next(DefaultMaleName.Count)];
        }

        public static IReadOnlyDictionary<AResourceType, ATechnologyType> ResourceRequiredTechnologies = new Dictionary<AResourceType, ATechnologyType>()
        {
            { AResourceType.None, ATechnologyType.PrimitiveSociety },
            { AResourceType.Iron, ATechnologyType.CastingMetals },
            { AResourceType.Copper, ATechnologyType.Mining },
            { AResourceType.Gold, ATechnologyType.CastingMetals },
            { AResourceType.Silver, ATechnologyType.CastingMetals },
            { AResourceType.Stone, ATechnologyType.HuntingAndGathering },
            { AResourceType.Marable, ATechnologyType.HuntingAndGathering },
            { AResourceType.Wood, ATechnologyType.HuntingAndGathering },
            { AResourceType.Fish, ATechnologyType.Fishing },
            { AResourceType.Wheat, ATechnologyType.Agriculture }
        };

    }
}
